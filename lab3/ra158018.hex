#************************************************#
#                MC404, 3rd lab                  #
#          written by Isadora Sophia             #
#               August 26, 2015                  #
#                                                #
#    Calculates the dot product of two arrays.   #
#************************************************#

# ---------------------------------------------- #
#                                                #
# 1. instructions                                #
# The program instructions.                      #
#                                                #
# ---------------------------------------------- #
#   1.1 assembler language                       #
# ---------------------------------------------- #
## Copy the memory of the first element of 
## each array to program data.
# LOAD M(3fd)              | array no. 1
# STOR M(03c)
# LOAD M(3fe)              | array no. 2
# STOR M(03d)
#
## Handle some data
# LOAD M(3ff)              | load total size
# SUB M(03f)               | subtract by 1, since loop is ruled by >= 0
# STOR M(3ff)
#
## Loop
# LOAD M(03c)              | load index (array no. 1)
# STOR M(xxx, 8:19)        | update
# ADD M(03f)               | add 1
# STOR M(03c)              | save value
#
# LOAD M(03d)              | load index (array no. 2)
# STOR M(xxx, 28:39)       | update
# ADD M(03f)               | add 1
# STOR M(03d)              | save value
#
# LOAD MQ, M(000)          | load 1st array element
# MUL M(000)               | multiplies by 2nd array element
# LOAD MQ                  | saves at AC
# ADD M(03e)               | adds at sum
# STOR M(03e)              | saves at sum
#
## while (i <= size - 1) ~> while (0 <= size - i - 1)
# LOAD -M(03c)             | negative index (array no. 1), -i + memory
# ADD M(3fd)               | add first index memory, -i + memory - memory
# ADD M(3ff)               | finally, adds the size - 1, -i - 1 + size
# JUMP+ M(002, 0:19)       | if the result is >= 0, continue
#
## finishes
# LOAD M(03e)              | loads sum at AC
# JUMP M(400)              | exit
#
# ---------------------------------------------- #
#   1.2 machine language                         #
# ---------------------------------------------- #
## Copy the memory of the first element of
## each array to program data.
000 01 3fd 21 03c          # AC := M(3fd);       M(03c) := AC
001 01 3fe 21 03d          # AC := M(3fe);       M(03d) := AC

## Handle some data&loop
002 01 3ff 06 03f          # AC := M(3ff);       AC := AC - M(03f)
003 21 3ff 01 03c          # M(3ff) := AC;       AC := M(03c);

## Loop
# array no. 1&2
004 13 007 05 03f          # STOR M(007, 28:39); AC := AC + M(03f)
005 21 03c 01 03d          # M(03c) := AC;       AC := M(03d);

# array no. 2&operations
006 12 008 05 03f          # STOR M(008, 8:19);  AC := AC + M(03f)
007 21 03d 09 000          # M(03d) := AC;       MQ := M(000);

# operations
008 0B 000 0A 000          # MQ := MQ * M(000);  AC := MQ;
009 05 03e 21 03e          # AC := AC + M(03e);  M(03e) := AC;

# while (i <= size - 1) ~>
#  while (0 <= size - i - 1)
00a 02 03c 05 3fd          # AC := -M(03c);      AC := AC + M(3fd)
00b 05 3ff 10 003          # AC := AC + M(3ff);  JUMP+ M(004, 0:19)

## Finishes
00c 01 03e 0D 400          # AC := M(03e);       JUMP M(400)

## Variables data
03c 00 00 00 00 00         # index of array no. 1
03d 00 00 00 00 00         # index of array no. 2
03e 00 00 00 00 00         # sum
03f 00 00 00 00 01         # constant 1

# ---------------------------------------------- #
#                                                #
# 2. array data                                  #
# Stores the data of both arrays which are       #
# used in the program.                           #
#                                                #
# ---------------------------------------------- #
#
# Replace with memory map!
#
# ---------------------------------------------- #
#                                                #
# 3. array handlers                              #
# Keep track of the index and total size.        #
#                                                #
# ---------------------------------------------- #
3fd 00 00 00 00 00         # first index of array no. 1
3fe 00 00 00 00 00         # first index of array no. 2
3ff 00 00 00 00 02         # total size of the array
